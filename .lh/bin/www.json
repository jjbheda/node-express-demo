{
    "sourceFile": "bin/www",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1727351040124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727351070952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,37 @@\n #!/usr/bin/env node\n \n-/**\n- * Module dependencies.\n- */\n-\n var app = require(\"../app\");\n var debug = require(\"debug\")(\"node-express-demo:server\");\n var http = require(\"http\");\n-var https = require(\"https\");\n-var fs = require(\"fs\");\n \n-// SSL证书配置\n-const options = {\n-  key: fs.readFileSync(\"/opt/guiqiantec.com.key\"),\n-  cert: fs.readFileSync(\"/opt/guiqiantec.com.pem\"),\n-};\n-\n var port = normalizePort(process.env.PORT || \"3000\");\n app.set(\"port\", port);\n \n-// 创建HTTP和HTTPS服务器\n-var httpServer = http.createServer(app);\n-var httpsServer = https.createServer(options, app);\n+var server = http.createServer(app);\n \n-// 启动HTTP和HTTPS服务器\n-httpServer.listen(port);\n-httpsServer.listen(443);\n+server.listen(port);\n+server.on(\"error\", onError);\n+server.on(\"listening\", onListening);\n \n-// 处理错误和监听事件\n-httpServer.on(\"error\", onError);\n-httpsServer.on(\"error\", onError);\n-httpServer.on(\"listening\", onListening);\n-httpsServer.on(\"listening\", onListening);\n-\n-/**\n- * Normalize a port into a number, string, or false.\n- */\n-\n function normalizePort(val) {\n   var port = parseInt(val, 10);\n-\n   if (isNaN(port)) {\n-    // named pipe\n     return val;\n   }\n-\n   if (port >= 0) {\n-    // port number\n     return port;\n   }\n-\n   return false;\n }\n \n-/**\n- * Event listener for HTTP server \"error\" event.\n- */\n-\n function onError(error) {\n   if (error.syscall !== \"listen\") {\n     throw error;\n   }\n \n   var bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\n \n-  // handle specific listen errors with friendly messages\n   switch (error.code) {\n     case \"EACCES\":\n       console.error(bind + \" requires elevated privileges\");\n       process.exit(1);\n@@ -78,13 +44,9 @@\n       throw error;\n   }\n }\n \n-/**\n- * Event listener for HTTP server \"listening\" event.\n- */\n-\n function onListening() {\n-  var addr = server.address(); // 确保 server 在此处可用\n+  var addr = server.address(); // server 必须在此可用\n   var bind = typeof addr === \"string\" ? \"pipe \" + addr : \"port \" + addr.port;\n   debug(\"Listening on \" + bind);\n }\n"
                }
            ],
            "date": 1727351040124,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = require(\"../app\");\nvar debug = require(\"debug\")(\"node-express-demo:server\");\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\n// SSL证书配置\nconst options = {\n  key: fs.readFileSync(\"/opt/guiqiantec.com.key\"),\n  cert: fs.readFileSync(\"/opt/guiqiantec.com.pem\"),\n};\n\nvar port = normalizePort(process.env.PORT || \"3000\");\napp.set(\"port\", port);\n\n// 创建HTTP和HTTPS服务器\nvar httpServer = http.createServer(app);\nvar httpsServer = https.createServer(options, app);\n\n// 启动HTTP和HTTPS服务器\nhttpServer.listen(port);\nhttpsServer.listen(443);\n\n// 处理错误和监听事件\nhttpServer.on(\"error\", onError);\nhttpsServer.on(\"error\", onError);\nhttpServer.on(\"listening\", onListening);\nhttpsServer.on(\"listening\", onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== \"listen\") {\n    throw error;\n  }\n\n  var bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case \"EACCES\":\n      console.error(bind + \" requires elevated privileges\");\n      process.exit(1);\n      break;\n    case \"EADDRINUSE\":\n      console.error(bind + \" is already in use\");\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address(); // 确保 server 在此处可用\n  var bind = typeof addr === \"string\" ? \"pipe \" + addr : \"port \" + addr.port;\n  debug(\"Listening on \" + bind);\n}\n"
        }
    ]
}